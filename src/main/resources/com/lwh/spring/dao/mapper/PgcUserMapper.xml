<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lwh.spring.dao.mapper.PgcUserMapper" >
  <resultMap id="BaseResultMap" type="com.lwh.spring.dao.model.PgcUser" >
    <id column="uid" property="uid" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="BIT" />
    <result column="type" property="type" jdbcType="BIT" />
    <result column="user_type" property="userType" jdbcType="BIT" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="source" property="source" jdbcType="BIT" />
    <result column="settle_level" property="settleLevel" jdbcType="BIT" />
    <result column="boss_uid" property="bossUid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    uid, status, type, user_type, reason, create_time, update_time, source, settle_level, 
    boss_uid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lwh.spring.dao.model.PgcUserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pgc_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="offset != null and offset >= 0 and rows != null and rows >= 0" >
      limit #{offset},#{rows}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from pgc_user
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from pgc_user
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lwh.spring.dao.model.PgcUserExample" >
    delete from pgc_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lwh.spring.dao.model.PgcUser" >
    insert into pgc_user (uid, status, type, user_type, 
      reason, create_time, update_time, 
      source, settle_level, boss_uid
      )
    values (#{uid,jdbcType=INTEGER}, #{status,jdbcType=BIT}, #{type,jdbcType=BIT}, #{userType,jdbcType=BIT}, 
      #{reason,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{source,jdbcType=BIT}, #{settleLevel,jdbcType=BIT}, #{bossUid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lwh.spring.dao.model.PgcUser" >
    insert into pgc_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        uid,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="userType != null" >
        user_type,
      </if>
      <if test="reason != null" >
        reason,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="source != null" >
        source,
      </if>
      <if test="settleLevel != null" >
        settle_level,
      </if>
      <if test="bossUid != null" >
        boss_uid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=BIT},
      </if>
      <if test="userType != null" >
        #{userType,jdbcType=BIT},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="source != null" >
        #{source,jdbcType=BIT},
      </if>
      <if test="settleLevel != null" >
        #{settleLevel,jdbcType=BIT},
      </if>
      <if test="bossUid != null" >
        #{bossUid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lwh.spring.dao.model.PgcUserExample" resultType="java.lang.Integer" >
    select count(*) from pgc_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update pgc_user
    <set >
      <if test="record.uid != null" >
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=BIT},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=BIT},
      </if>
      <if test="record.userType != null" >
        user_type = #{record.userType,jdbcType=BIT},
      </if>
      <if test="record.reason != null" >
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.source != null" >
        source = #{record.source,jdbcType=BIT},
      </if>
      <if test="record.settleLevel != null" >
        settle_level = #{record.settleLevel,jdbcType=BIT},
      </if>
      <if test="record.bossUid != null" >
        boss_uid = #{record.bossUid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update pgc_user
    set uid = #{record.uid,jdbcType=INTEGER},
      status = #{record.status,jdbcType=BIT},
      type = #{record.type,jdbcType=BIT},
      user_type = #{record.userType,jdbcType=BIT},
      reason = #{record.reason,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      source = #{record.source,jdbcType=BIT},
      settle_level = #{record.settleLevel,jdbcType=BIT},
      boss_uid = #{record.bossUid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lwh.spring.dao.model.PgcUser" >
    update pgc_user
    <set >
      <if test="status != null" >
        status = #{status,jdbcType=BIT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=BIT},
      </if>
      <if test="userType != null" >
        user_type = #{userType,jdbcType=BIT},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="source != null" >
        source = #{source,jdbcType=BIT},
      </if>
      <if test="settleLevel != null" >
        settle_level = #{settleLevel,jdbcType=BIT},
      </if>
      <if test="bossUid != null" >
        boss_uid = #{bossUid,jdbcType=INTEGER},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lwh.spring.dao.model.PgcUser" >
    update pgc_user
    set status = #{status,jdbcType=BIT},
      type = #{type,jdbcType=BIT},
      user_type = #{userType,jdbcType=BIT},
      reason = #{reason,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      source = #{source,jdbcType=BIT},
      settle_level = #{settleLevel,jdbcType=BIT},
      boss_uid = #{bossUid,jdbcType=INTEGER}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
</mapper>